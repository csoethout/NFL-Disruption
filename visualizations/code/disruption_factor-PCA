library(tidyverse)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(skimr)

# Making a tidy dataset with all continuous data possibly used in defensive
# disruption
play_disruption <- play_disruption[!is.na(play_disruption$time_at_line), ]

tidy_play_disruption <- play_disruption %>% 
  select(play_index, inMotionAtBallSnap_speed, inMotionAtBallSnap_accel,
         shiftSinceLineset_count, motionSinceLineset_count, 
         tot_avg_motion_speed, tot_max_motion_speed, tot_avg_motion_accel,
         tot_max_motion_accel, tot_motion_distance, tot_motion_time,
         tot_ps_def_dis_traveled, tot_ps_def_dir_changes, time_to_line,
         time_at_line, prev_tot_def_as_dis_traveled, prev_tot_off_as_dis_traveled)

# normalizing the data
norm_tidy_play_disruption <- 
  tidy_play_disruption %>% 
  ungroup() %>% 
  select(-play_index, -tot_max_motion_speed, -tot_max_motion_accel) %>% 
  scale()

# Fit the PCA
dd_play_pca <- princomp(norm_tidy_play_disruption)

# Summary
summary(dd_play_pca)

# Describe the loadings for the first couple components
dd_play_pca$loadings[,1:10]

# Visualize the scree
fviz_eig(dd_play_pca, addlabels = TRUE)

# Visualize the first two components in biplots
fviz_pca_var(dd_play_pca, col.var = "black")

#adding back to play_disruption and naming the variable disruption_factor
play_disruption <- 
  play_disruption %>% 
  bind_cols(dd_play_pca$scores[,1]) 

play_disruption <- play_disruption %>%
  rename(disruption_factor = `...91`)

